Day 45 : 11 Aug
Continued working on the PySyft ticket related to implementing stateful plans https://github.com/OpenMined/PySyft/issues/2385

Day 44 : 10 Aug, 11:53 PM
Worked on the PySyft ticket related to implementing stateful plans https://github.com/OpenMined/PySyft/issues/2385

Day 43 : 09 Aug, 11:29 PM
1. Read about Secure Multi-Party Computation and SPDZ protocol.
2. Continued with NLP covering tokenization, stemming and lemmatization today.

Day 42 : 08 Aug, 11:24 PM
1. Continued with Lesson 2 of Reinforcement Learning course on Udacity.
2. Studied about Named Entity Recognition and Parts of Speech tagging using spacy.

Day 41 : 07 Aug, 11:44 PM
1. Started going through the Reinforcement Learning course on Udacity offered at Georgia Tech as CS 8803. Lesson 2 in progress.
2. Studied about face detection techniques 

Day 40 : 06 Aug, 11:29 PM
1. Revised Lesson 9 "Encrypted Federated Learning"
2. Read the OpenMined blog post on training a neural network on encrypted values using Secure Multi-Party Computation and Autograd https://blog.openmined.org/encrypted-training-on-mnist/

Day 39 : 05 Aug, 11:13 PM
1. Spent time on finding security related bug in PySyft as part of https://github.com/OpenMined/PySyft/issues/2421 and opened an issue with web sockets wherein tensors remain in web socket server memory if websocketclient connection closes abruptly. Issue details can be found here https://github.com/OpenMined/PySyft/issues/2442
2. Attended weekly meetup for the #sg_intro-ai-challenge group and discussed on the ongoing project.

Day 38: 04 Aug, 11:36 PM
Went through reinforcement learning tutorials covering topics like Markov Decision Processes, Bellman equation, Q-learning and Deep Q learning (DQN) which uses a neural network to approximate the Q-value function.

Day 37 : 03 Aug, 9:40 PM
1. Revised Lesson 8 "Securing Federated Learning"
2. Joined the slack group of the "AWS DeepRacer scholarship challenge" and started going through the AWS DeepRacer videos. 

Day 36 : 02 Aug, 8:15 PM
Started revision of the modules of Secure and Private AI course. Started with Lesson 2 "Deep Learning with Pytorch"

Day 35 : 01 Aug, 11:16 PM
Spent time today on trying out some white hat hacking skills on PySyft. This is the related issue in case someone would be interested to jump in https://github.com/OpenMined/PySyft/issues/2421 

Day 34 : 31 July, 11:53 PM
Started working on a new feature in PySyft related to Plans https://github.com/OpenMined/PySyft/issues/2385

Day 33 : 30 July, 11:56 PM
Read about PySyft Plan abstraction and went through the example tutorial. https://github.com/OpenMined/PySyft/blob/dev/examples/tutorials/Part%208%20-%20Introduction%20to%20Plans.ipynb 

Day 32 : 29 July, 11:22 PM
Completed implementation of the DCGAN for generating fake images of cats and dogs. Training is in progress.

Day 31 : 28 July, 9:23 PM
1. Continued working on the DCGAN implementation in Pytorch for generating fake images of cats and dogs.
2. Participated in the Kahoot quiz covering #l6_federated_learning conducted by @Michael Sheinman and got 2nd ranking. Good to get some revision of the concepts of this lesson.
https://image.prntscr.com/image/qdgKRuzkR9qyTGTdyGN1BQ.png  

Day 30: 27 July, 11:19 PM
Started working on implementing a DCGAN in Pytorch for generating fake images of cats and dogs.

Day 29 : 26 July, 11:15 PM
Continued studying about GAN and DCGAN and how to implement discriminator and generator models.

Day 28 : 25 July, 11:02 PM
1. Started studying about generative adversarial networks (GANs)
2. Worked on a PySyft issue related to websocket client (https://github.com/OpenMined/PySyft/issues/2390) and raised a PR for the same (https://github.com/OpenMined/PySyft/pull/2395)

Day 27 : 24 July, 11:04 PM
Worked on a PySyft websocket server startup issue on Windows (https://github.com/OpenMined/PySyft/issues/2370) and created a PR for the same. Pull Request link - https://github.com/OpenMined/PySyft/pull/2389

Day 26 : 23 July, 10:40 PM
1. Completed the implementation of my custom Pytorch MNIST dataset class for kaggle data and trained a CNN model using the Dataset\Dataloader interface. Due to this custom dataset class I was also able to apply the torchvision Transforms operations to the dataset. However, the model could only score 0.92 on kaggle which didn't turnout to be better than the CNN model I had created earlier without using this custom dataset class which was around 0.98.
2. Would like to encourage @J. Luis Samper and @Stark today   

Day 25 : 22 July, 11:07 PM
Worked on implementing a custom Pytorch dataset class for creating a dataset\dataloader kind of interface for reading MNIST data from csv file from kaggle. Currently work is in progress.

Day 24 : 21 July, 8:19 PM
1. Worked on building a CNN model in Pytorch with MNIST dataset from kaggle.
2. Learnt creating a custom dataset class in Pytorch which can create a torchvision like dataset interface for custom datasets.

Day 23 : 19 July, 11:04 PM
1. Completed the course today.
2. Read about how to handle overfitting in a CNN model.
3. Did some data analysis of the eye disease dataset being used in #sg_intro-ai-challenge . The dataset has unbalanced labels.
4. Updated my CNN code to generate some metrics like precision, recall and f1-score. https://github.com/amit-rastogi/60DaysofUdacity/blob/master/sg_intro-ai-challenge/Predicting%20Human%20eye%20diseases.ipynb

Day 22 : 18 July, 11:54 PM
Worked further on the CNN model for the eye disease dataset from kaggle as part of the #sg_intro-ai-challenge project and added more convolutional and pooling layers. Also added dropout layers. Added logic to generate confusion matrix to check the model accuracy. Code has been updated on my github repository  https://github.com/amit-rastogi/60DaysofUdacity/blob/master/sg_intro-ai-challenge/Predicting%20Human%20eye%20diseases.ipynb

Day 21 : 17 July, 11:34 PM
1. Continued studying CNN implementation using Pytorch.
2. Attended the online meetup of our study group #sg_intro-ai-challenge.

Day 20 : 16 July, 11:14 PM
Implemented a simple CNN classifier for the Eye disease dataset from kaggle for predicting eye diseases which is also the goal for the week for our study group #sg_intro-ai-challenge. Currently it's a simple CNN model and I would be working on this model further to add more convolutional, pooling layers and dropout layers. I have uploaded the code on github https://github.com/amit-rastogi/60DaysofUdacity/blob/master/sg_intro-ai-challenge/Predicting%20Human%20eye%20diseases.ipynb

Day 19 : 15 July, 11:27 PM
1. Continued studying about CNN's. Getting a hang around using the correct shapes for the Conv2D and fully connected layers for a reshaped image in Pytorch. Would be applying the same on the Eye disease dataset from kaggle for predicting eye diseases which is also the goal for the week for our study group #sg_intro-ai-challenge.
2. Would like to encourage @Stark and @J. Luis Samper for today

Day 18 : 14 July, 10:29 PM
Studied about Convolutional neural network and downloaded the Eye disease dataset from kaggle and started with image pre-processing for training a CNN for predicting eye diseases. 

Day 17 : 13 July, 11:10 PM
1. Studied Private Deep Learning with MPC using this link https://mortendahl.github.io/2017/04/17/private-deep-learning-with-mpc/
2. Started working on the PySyft issue related to Web Sockets https://github.com/OpenMined/PySyft/issues/2281

Day 16 : 12 July, 11:57 PM
Explored the PySyft's local autograd functionality and read about secured multi-party computation as a follow-up to the encrypted deep learning lesson 9.

Day 15 : 11 July, 11:20 PM
1. Completed the video lectures of Lesson 9 : Encrypted deep learning
2. Converted my earlier implementation of federated learning using a secured aggregrator into an encrypted federated learning using a crypto provider. Code is uploaded on my github repository -   https://github.com/amit-rastogi/60DaysofUdacity/blob/master/EncryptedDeepLearning/EncryptedFederatedLearning.ipynb 

Day 14 : 10 July, 9:54 PM 
1. Continued with Lesson 9 : Encrypted deep learning
2. Started reading about image classification using pre-trained models in pytorch.

Day 13 : 9 July, 11:24 PM
1. Continued with studying the PySyft's web socket server and client implementations for federated learning.
2. Picked up a bug from PySyft issue list related to Web Sockets to work on. https://github.com/OpenMined/PySyft/issues/2281
3. Created a daily update log of #60daysofudacity challenge in my github repository https://github.com/amit-rastogi/60DaysofUdacity.git

Day 12 : 8 July, 11:41 PM
1. Continued with Lesson 9 - Encrypted deep learning. Completed lectures till "Project Demo - Build an Encrypted Database"
2. Studied about web sockets w.r.t the PySyft websocket federated learning implementation

Day 11 : 7 July, 8:57 PM
1. Started with Lesson 9 - Encrypted deep learning
2. Joined the study group "INTRO (AI Challenge Study Group)"
3. Studied the PySyft WebSocket federated learning example https://github.com/OpenMined/PySyft/tree/dev/examples/tutorials/advanced/websockets-example-MNIST

Day 10 : 6 July, 11:16 PM
1. Completed Lesson  6 - "Differential privacy for deep learning". Implemented final project for this lesson to train a model on a dummy public unlabelled image dataset using private labels as per the hospital example given in this lesson. Code uploaded on my github account https://github.com/amit-rastogi/60DaysofUdacity/blob/master/DifferentialPrivacyForDeepLearning/FinalProject_DifferentialPrivacyForDeepLearning.ipynb
2. Worked on my PySyft PR https://github.com/OpenMined/PySyft/pull/2339
3. Today I would like to encourage @Arka and @Droid

Day 9 : 5 July, 9:36 PM
1. Continued with Lesson  6 - "Differential privacy for deep learning"
2. Worked on an OpenMined PySyft issue https://github.com/OpenMined/PySyft/issues/2333

The below updates have been taken from the #60daysofudacity slack channel archive 

Day 8 : 4 July, 22:56
1. Continued with Lesson 6 - "Differential privacy for deep learning". Specifically completed chapters 6.3 (generating differentially private labels for dataset) and 6.4 (PATE analysis)
2. Worked on adding version attribute to syft so that PySyft users could use syft._version_ to retrieve the version of PySyft they are using. Created a PR for the same https://github.com/OpenMined/PySyft/pull/2335

Day 7 : 3 July, 23:03
1. Started with Lesson 6 - Differential privacy for deep learning.
2. Studied about pytorch autograd and debugged some code using basic operations on autograd enabled tensors to understand autograd

Day 6 : 2 July, 22:54
1. Completed lesson 5 "Introducing Local and Global Differential Privacy". Implemented the project demo to create a differentially private query using laplacian noise. Code uploaded on github. https://github.com/amit-rastogi/60DaysofUdacity/blob/master/DifferentialPrivacy/GlobalDifferentialPrivacy.ipynb
2. My first PR for the Openmined Grid project also got approved and merged into the dev branch - https://github.com/OpenMined/Grid/pull/250

Day 5: 1 July, 20:12
Continued on Lesson 5. Covered how to vary the amount of noise to be added for local differential privacy and de-skew results appropriately. Updated my code on github https://github.com/amit-rastogi/60DaysofUdacity/blob/master/DifferentialPrivacy/LocalDifferentialPrivacy.ipynb

Day 4: 30 June, 21:28
Completed lesson 4 "Evaluating the privacy of a function". Started lesson 5 "Introducing Local and Global Differential Privacy". Implemented project demo for local differential privacy and uploaded on github https://github.com/amit-rastogi/60DaysofUdacity/blob/master/DifferentialPrivacy/LocalDifferentialPrivacy.ipynb

Day 3: 29 June, 21:04
Completed the project demo for "Federated learning with Trusted aggregrator" in Lesson 8.2. Implemented code to train a fully connected 2 layer binary classifier model on a toy dataset using federated learning on remote workers and aggregrating the trained models on a trusted worker. Code uploaded on my github repository https://github.com/amit-rastogi/60DaysofUdacity/blob/master/SecuringFederatedLearning/FederatedLearningWithTrustedAggregrator.ipynb

Day 2: 28 June, 23:33
Day 2: Completed lesson 3 "Introducing differential privacy" and started with lesson 4 "Evaluating the privacy of a function". Created sample program for empirical calculation of sensitivity of a sum and mean query. I am uploading my sample programs to my github repository https://github.com/amit-rastogi/60DaysofUdacity.git

Day 1: 27 June, 21:06
Took the pledge for the #60DaysofUdacity challenge starting today.
Day 1: Started going through the OpenMined Grid project. Did the code setup on my machine and debugged the sample code. Grid is a peer-to-peer network of data owners and data scientists who can collectively train AI models using PySyft.
https://github.com/OpenMined/Grid
